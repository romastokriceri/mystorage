services:
  db:
    image: postgres:15-alpine
    container_name: mystorage_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: mystorage_db
      POSTGRES_USER: mystorage_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mystorage_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mystorage_user -d mystorage_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mystorage_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://mystorage_user:${POSTGRES_PASSWORD:-mystorage_password}@db:5432/mystorage_db
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    volumes:
      - ./media:/app/media
    networks:
      - app_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        REACT_APP_API_URL: /api
    container_name: mystorage_frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app_network

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: mystorage_nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: